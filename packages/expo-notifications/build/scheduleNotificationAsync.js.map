{"version":3,"file":"scheduleNotificationAsync.js","sourceRoot":"","sources":["../src/scheduleNotificationAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAoCtD,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,yBAAyB,CACrD,UAAkB,EAClB,YAAiC,EACjC,OAA4B;IAE5B,OAAO,MAAM,kBAAkB,CAAC,qBAAqB,CAAC,yBAAyB,CAC7E,UAAU,EACV,YAAY,EACZ,YAAY,CAAC,OAAO,CAAC,CACtB,CAAC;AACJ,CAAC;AAOD,SAAS,YAAY,CAAC,iBAAsC;IAC1D,IAAI,iBAAiB,YAAY,IAAI,EAAE;QACrC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC;KAC7D;SAAM,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;QAChD,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC;KACnD;SAAM,IAAI,SAAS,IAAI,iBAAiB,EAAE;QACzC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE;YAC9B,+CAA+C;YAC/C,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,iBAAiB,CAAC,OAAO,EAAE,CAAC;SAClF;aAAM;YACL,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,iBAAiB,CAAC,OAAO,EAAE,CAAC;SAC/D;KACF;SAAM;QACL,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC;KACvD;AACH,CAAC","sourcesContent":["import { NativeModulesProxy } from '@unimodules/core';\n\ntype NotificationRequest = unknown; // TODO: Presentation PR\n\nexport type ScheduleId = string;\nexport type TimeZoneId = string;\n\n// ISO8601 calendar pattern-matching\nexport interface CalendarTrigger {\n  repeats?: boolean;\n\n  timezone?: 'local' | TimeZoneId;\n\n  era?: number;\n  year?: number;\n  month?: number;\n  weekday?: number;\n  weekOfMonth?: number;\n  weekOfYear?: number;\n  weekdayOrdinal?: number;\n  day?: number;\n\n  hour?: number;\n  minute?: number;\n  second?: number;\n}\n\nexport interface TimeIntervalTrigger {\n  repeats?: boolean;\n  seconds: number; // from now\n}\n\nexport type DateTrigger = Date | number; // Date object or seconds since 1970\n\nexport type NotificationTrigger = TimeIntervalTrigger | CalendarTrigger | DateTrigger;\n\nexport default async function scheduleNotificationAsync(\n  identifier: string,\n  notification: NotificationRequest,\n  trigger: NotificationTrigger\n): Promise<void> {\n  return await NativeModulesProxy.NotificationScheduler.scheduleNotificationAsync(\n    identifier,\n    notification,\n    parseTrigger(trigger)\n  );\n}\n\ntype NativeTrigger =\n  | { type: 'date'; value: number }\n  | { type: 'interval'; value: number }\n  | { type: 'calendar'; value: CalendarTrigger };\n\nfunction parseTrigger(userFacingTrigger: NotificationTrigger): NativeTrigger {\n  if (userFacingTrigger instanceof Date) {\n    return { type: 'date', value: userFacingTrigger.getTime() };\n  } else if (typeof userFacingTrigger === 'number') {\n    return { type: 'date', value: userFacingTrigger };\n  } else if ('seconds' in userFacingTrigger) {\n    if (!userFacingTrigger.repeats) {\n      // not-repeating interval is just a single date\n      return { type: 'date', value: new Date().getTime() + userFacingTrigger.seconds };\n    } else {\n      return { type: 'interval', value: userFacingTrigger.seconds };\n    }\n  } else {\n    return { type: 'calendar', value: userFacingTrigger };\n  }\n}\n"]}